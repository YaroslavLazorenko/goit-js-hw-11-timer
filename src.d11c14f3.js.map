{"version":3,"sources":["index.js"],"names":["COUNT_DELAY","CountdownTimer","constructor","selector","targetDate","refs","timerId","getRefs","daysSpan","document","querySelector","hoursSpan","minsSpan","secsSpan","startCount","setInterval","deltaTime","Date","now","days","Math","floor","hours","mins","secs","insertValues","textContent","timer"],"mappings":";AAAA,MAAMA,EAAc,IAEpB,MAAMC,EACJC,aAAY,SAAEC,EAAF,WAAYC,IACjBD,KAAAA,SAAWA,EACXC,KAAAA,WAAaA,EACbC,KAAAA,KAAO,KACPC,KAAAA,QAAU,KAGjBC,UACOF,KAAAA,KAAO,CACVG,SAAUC,SAASC,iBAAiB,KAAKP,oCACzCQ,UAAWF,SAASC,iBAAiB,KAAKP,qCAC1CS,SAAUH,SAASC,iBAAiB,KAAKP,oCACzCU,SAAUJ,SAASC,iBAAiB,KAAKP,qCAI7CW,aACOP,KAAAA,UACAD,KAAAA,QAAUS,YAAY,KACnBC,MAAAA,EAAY,KAAKZ,WAAaa,KAAKC,MACnCC,EAAOC,KAAKC,MAAML,EAAa,OAC/BM,EAAQF,KAAKC,MAAOL,EAAa,MAAyB,MAC1DO,EAAOH,KAAKC,MAAOL,EAAa,KAAoB,KACpDQ,EAAOJ,KAAKC,MAAOL,EAAa,IAAc,KAC/CS,KAAAA,aAAaN,EAAMG,EAAOC,EAAMC,IACpCxB,GAGLyB,aAAaN,EAAMG,EAAOC,EAAMC,GACzBnB,KAAAA,KAAKG,SAASkB,YAAcP,EAC5Bd,KAAAA,KAAKM,UAAUe,YAAcJ,EAC7BjB,KAAAA,KAAKO,SAASc,YAAcH,EAC5BlB,KAAAA,KAAKQ,SAASa,YAAcF,GAIrC,MAAMG,EAAQ,IAAI1B,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIa,KAAK,iBAIvBU,EAAMb","file":"src.d11c14f3.js","sourceRoot":"../src","sourcesContent":["const COUNT_DELAY = 1000;\n\nclass CountdownTimer {\n  constructor({ selector, targetDate }) {\n    this.selector = selector;\n    this.targetDate = targetDate;\n    this.refs = null;\n    this.timerId = null;\n  }\n\n  getRefs() {\n    this.refs = {\n      daysSpan: document.querySelector(`${this.selector} span[data-value=\"days\"]`),\n      hoursSpan: document.querySelector(`${this.selector} span[data-value=\"hours\"]`),\n      minsSpan: document.querySelector(`${this.selector} span[data-value=\"mins\"]`),\n      secsSpan: document.querySelector(`${this.selector} span[data-value=\"secs\"]`),\n    };\n  }\n\n  startCount() {\n    this.getRefs();\n    this.timerId = setInterval(() => {\n      const deltaTime = this.targetDate - Date.now();\n      const days = Math.floor(deltaTime / (1000 * 60 * 60 * 24));\n      const hours = Math.floor((deltaTime % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n      const mins = Math.floor((deltaTime % (1000 * 60 * 60)) / (1000 * 60));\n      const secs = Math.floor((deltaTime % (1000 * 60)) / 1000);\n      this.insertValues(days, hours, mins, secs);\n    }, COUNT_DELAY);\n  }\n\n  insertValues(days, hours, mins, secs) {\n    this.refs.daysSpan.textContent = days;\n    this.refs.hoursSpan.textContent = hours;\n    this.refs.minsSpan.textContent = mins;\n    this.refs.secsSpan.textContent = secs;\n  }\n}\n\nconst timer = new CountdownTimer({\n  selector: '#timer-1',\n  targetDate: new Date('Jan 7, 2022'),\n});\n\n//timer.getRefs();\ntimer.startCount();\n"]}